//
//  FrameworkListViewController.swift
//  AppleFramework_Moon
//
//  Created by Ïù¥Î¨∏Ï†ï on 2023/10/30.
//

import UIKit
import Combine

class FrameworkListViewController: UIViewController {
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    var dataSource: UICollectionViewDiffableDataSource<Section, Item>!
    
    typealias Item = AppleFramework
    enum Section {
        case main
    }
    
//    let list: [AppleFramework] = AppleFramework.list
    
    // Combine
    var subscriptions = Set<AnyCancellable>()
    let didSelect = PassthroughSubject<AppleFramework, Never>()
    let items = CurrentValueSubject<[AppleFramework], Never>(AppleFramework.list)
//    @Published var list: [AppleFramework] = AppleFramework.list
 
    override func viewDidLoad() {
        super.viewDidLoad()
        configureCollectionView()
        bind()
        
        // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌÉÄÏù¥ÌãÄ Î∞îÍæ∏Í∏∞
        navigationController?.navigationBar.topItem?.title = "ü•≥ Apple Frameworks"
    }
    
    // Ìï¥Îãπ Î∑∞ÏóêÏÑúÏùò ÌïµÏã¨ Î°úÏßÅÏùÑ Ìïú Í≥≥Ïóê Î™®ÏïÑÎë†
    private func bind() {
        // input: ÏÇ¨Ïö©Ïûê Ïù∏ÌíãÏùÑ Î∞õÏïÑÏÑú Ï≤òÎ¶¨Ìï¥Ïïº Ìï† Í≤É
        // - item ÏÑ†ÌÉù ÎêòÏóàÏùÑ Îïå Ï≤òÎ¶¨
        didSelect
            .receive(on: RunLoop.main)
            .sink { [unowned self] framework in
            let storyboard = UIStoryboard(name: "Detail", bundle: nil)
            let viewController = storyboard.instantiateViewController(withIdentifier: "FrameworkDetailViewController") as! FrameworkDetailViewController
                viewController.framework.send(framework)
            self.present(viewController, animated: true)
        }.store(in: &subscriptions)
        
        // output: data, state Î≥ÄÍ≤ΩÏóê Îî∞ÎùºÏÑú UIÏóÖÎç∞Ïù¥Ìä∏
        // - items Í∞Ä ÏÑ∏ÌåÖÏù¥ ÎêòÏóàÏùÑ Îïå Ïª¨Î†âÏÖòÎ∑∞Î•º ÏóÖÎç∞Ïù¥Ìä∏
        items
            .receive(on: RunLoop.main)
            .sink { [unowned self] list in
            self.applySectionItems(list)
        }.store(in: &subscriptions)
        
    }
    
    private func  applySectionItems(_ items: [Item], to section: Section = .main) {
         // snap shot -> data
         var snapShot = NSDiffableDataSourceSnapshot<Section, Item>()
         snapShot.appendSections([section])
         snapShot.appendItems(items, toSection: section)
         dataSource.apply(snapShot)
    }
    
    private func configureCollectionView() {
        collectionView.delegate = self
        // presentation, data, layout
        // diffable datasoure -> presentation
        dataSource = UICollectionViewDiffableDataSource<Section,Item>(collectionView: collectionView, cellProvider: { collectionView, indexPath, item in
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "FrameworkCollectionViewCell", for: indexPath) as? FrameworkCollectionViewCell else {
                return UICollectionViewCell()
            }
            cell.configure(item)
            return cell
        })
        
        // compositional layout -> layout
        collectionView.collectionViewLayout = layout()
    }
    
    private func layout() -> UICollectionViewCompositionalLayout {
        
        let itemSize = NSCollectionLayoutSize(
            // fractionalWidth -> Ïä§ÌÅ¨Î¶∞Ïóê Ìï†ÎãπÎêú Íµ¨Ïó≠ÏóêÏÑú Í∞ÄÎ°úÎ°ú Í∑∏ ÎßåÌÅº ÎÇòÎààÎã§Îäî Îúª
            widthDimension: .fractionalWidth(0.33),
            // fractionalHeight -> Í∑∏Î£πÏùò ÌÅ¨Í∏∞Ïóê ÎåÄÌï¥ ÏïÑÏù¥ÌÖúÏùò ÌÅ¨Í∏∞Í∞Ä Í∑∏ ÎßåÌÅº Ï†ïÌï¥ÏßÑÎã§Îäî Îúª
            heightDimension: .fractionalHeight(1))
        let item = NSCollectionLayoutItem(
            layoutSize: itemSize)
        
        let groupSize = NSCollectionLayoutSize(
            // fractionalWidth -> ÏÑπÏÖòÏùò ÌÅ¨Í∏∞Ïóê ÎåÄÌï¥ ÏïÑÏù¥ÌÖúÏùò ÌÅ¨Í∏∞Í∞Ä Í∑∏ÎßåÌÅº Ï†ïÌï¥ÏßÑÎã§Îäî Îúª
            widthDimension:.fractionalWidth(1),
            // fractionalWidth -> ÏÑπÏÖòÏùò ÌÅ¨Í∏∞Ïóê ÎåÄÌï¥ ÏïÑÏù¥ÌÖúÏùò ÌÅ¨Í∏∞Í∞Ä Í∑∏ÎßåÌÅº Ï†ïÌï¥ÏßÑÎã§Îäî Îúª
            heightDimension: .fractionalWidth(0.45))
        let group = NSCollectionLayoutGroup.horizontal(
            layoutSize: groupSize,
            repeatingSubitem: item, count: 3)
        
        let section = NSCollectionLayoutSection(
            group: group)
        section.contentInsets = NSDirectionalEdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)
        
        let layout = UICollectionViewCompositionalLayout(
            section: section)
        return layout
    }
}

extension FrameworkListViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
//        let framework = list[indexPath.item]
        let framework = items.value[indexPath.item]
        print(">>>> selected: \(framework.name)")
        didSelect.send(framework)
    }
}
